'''
10/17/2022

Q: Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:

Triangle	 	P(3,n)=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Square	 	    P(4,n)=n^2	 	    1, 4, 9, 16, 25, ...
Pentagonal	 	P(5,n)=n(3n-1)/2	1, 5, 12, 22, 35, ...
Hexagonal	 	P(6,n)=n(2n-1)	 	1, 6, 15, 28, 45, ...
Heptagonal	 	P(7,n)=n(5n-3)/2	1, 7, 18, 34, 55, ...
Octagonal	 	P(8,n)=n(3n-2)	 	1, 8, 21, 40, 65, ...
The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
Each polygonal type: triangle (P(3,127)=8128), square (P(4,91)=8281), and pentagonal (P(5,44)=2882), is represented by a different number in the set.
This is the only set of 4-digit numbers with this property.
Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.

A: 28684

'''

# Create a list of the polygonal numbers per their respected list
listOfGonals = [[],[],[],[],[],[]]
for i in range(1,150):
    listOfGonals[0].append(int((i*(i+1))/2))
    listOfGonals[1].append(i**2)
    listOfGonals[2].append(int((i*(3*i-1))/2))
    listOfGonals[3].append(i*(2*i-1))
    listOfGonals[4].append(int((i*(5*i-3))/2))
    listOfGonals[5].append(i*(3*i-2))

# Combine the list above to create a list of all polygonal numbers between 1000 and 10,000
listOfGonalsAll = []
for i in listOfGonals:
    for b in i:
        if 1_000 < b < 10_000:
            listOfGonalsAll.append(b)
listOfGonalsAll = sorted(set(listOfGonalsAll))

# Loop through the full polygonal list and create combinations that meet the question criteria
sortedFinals = []
for a in listOfGonalsAll:
    for b in listOfGonalsAll:
        if str(a)[2:] == str(b)[0:2]:
            for c in listOfGonalsAll:
                if str(b)[2:] == str(c)[0:2]:
                    for d in listOfGonalsAll:
                        if str(c)[2:] == str(d)[0:2]:
                            for e in listOfGonalsAll:
                                if str(d)[2:] == str(e)[0:2]:
                                    for f in listOfGonalsAll:
                                        if str(e)[2:] == str(f)[0:2] and str(f)[2:] == str(a)[0:2]:
                                            # Check the created list of cyclicals against each list of the polygon numbers, turn true if the value is in the list
                                            gonalsTF = [False, False, False, False, False, False]
                                            for i in [a, b, c, d, e, f]:
                                                if i in listOfGonals[0] and gonalsTF[0] == False:
                                                    gonalsTF[0] = True
                                                elif i in listOfGonals[1] and gonalsTF[1] == False:
                                                    gonalsTF[1] = True
                                                elif i in listOfGonals[2] and gonalsTF[2] == False:
                                                    gonalsTF[2] = True
                                                elif i in listOfGonals[3] and gonalsTF[3] == False:
                                                    gonalsTF[3] = True
                                                elif i in listOfGonals[4] and gonalsTF[4] == False:
                                                    gonalsTF[4] = True
                                                elif i in listOfGonals[5] and gonalsTF[5] == False:
                                                    gonalsTF[5] = True
                                            # Check the T/F list, if all are true, print the sum
                                            for i in gonalsTF:
                                                if i == False:
                                                    break
                                            else:
                                                # Because it is cyclical, it will print it each time one of the numbers is chosen, so sort the list and save it so it won't print again.
                                                if sorted([a, b, c, d, e, f]) not in sortedFinals:
                                                    print(sum([a, b, c, d, e, f]))
                                                    sortedFinals.append(sorted([a, b, c, d, e, f]))